// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
<<<<<<< HEAD
<<<<<<< HEAD
  id String @id @default(cuid())
  name String
  conversations Conversation[]
}

model Conversation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  title String
  recording_url String
  file_path String
  transcript String
  summary String
  duration Int
  topics Topic[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Topic {
  id String @id @default(cuid())
  topic String
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
=======
    id         String      @id @default(uuid())
    email      String      @unique
    name       String?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
    recordings Recording[]
    Folder     Folder[]
    Comment    Comment[]
=======
  id String @id @default(cuid())
  name String
  conversations Conversation[]
>>>>>>> 59953bb (Implement APIs + db operations)
}

model Conversation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  title String
  recording_url String
  file_path String
  transcript String
  summary String
  duration Int
  topics Topic[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

<<<<<<< HEAD
model Transcript {
    id           String    @id @default(uuid())
    fullText     String // Complete transcription
    summary      String // AI-generated summary
    bulletPoints String // JSON string of bullet points
    sentiment    String? // Optional sentiment analysis
    keywords     String // JSON string of keywords
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    recordingId  String    @unique
    recording    Recording @relation(fields: [recordingId], references: [id])
}

model Tag {
    id         String      @id @default(uuid())
    name       String      @unique
    recordings Recording[]
}

model Folder {
    id         String      @id @default(uuid())
    name       String
    userId     String
    user       User        @relation(fields: [userId], references: [id])
    recordings Recording[]
}

model Comment {
    id          String    @id @default(uuid())
    text        String
    timestamp   Int // Position in audio (seconds)
    recordingId String
    recording   Recording @relation(fields: [recordingId], references: [id])
    userId      String
    user        User      @relation(fields: [userId], references: [id])
    createdAt   DateTime  @default(now())
>>>>>>> 7fde5fa (Added buttons for recording)
=======
model Topic {
  id String @id @default(cuid())
  topic String
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id])
>>>>>>> 59953bb (Implement APIs + db operations)
}
